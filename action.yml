# yaml-language-server: $schema=https://json.schemastore.org/github-action.json

name: "Hyperlight Workflow Setup"
description: "Common setup steps for GitHub workflows in the Hyperlight project"

inputs:
  rust-toolchain:
    description: "(Default: 1.74.0) Rust toolchain specification to install - see https://rust-lang.github.io/rustup/concepts/toolchains.html#toolchain-specification"
    required: false
    default: "1.74.0"

runs:
  using: composite
  steps:

    - uses: dtolnay/rust-toolchain@master
      with:
        toolchain: ${{ inputs.rust-toolchain }}
        components: clippy, rustfmt
    
    - uses: extractions/setup-just@v2
      with:
        just-version: "1.27"

    ### Linux setup ###

    - name: Install clang-tools (Linux mariner)
      if: ${{ (runner.os == 'Linux') }}
      run: |
        if command -v dnf > /dev/null 2>&1; then
          if command -v clang-cl > /dev/null 2>&1; then
            echo "clang already installed"
          else
            sudo dnf remove clang -y || true
            sudo dnf install clang17 -y
            sudo dnf install clang17-tools-extra -y
          fi
          if command -v lld-link /dev/null 2>&1; then
            echo "lld already installed"
          else
            sudo dnf remove lld -y || true
            sudo dnf install lld17 -y
          fi
          clang-cl --version
          lld-link --version
        fi
      shell: bash

    - name: Install clang-tools (Linux ubuntu)
      if: ${{ (runner.os == 'Linux') }}
      run: |
        if command -v apt > /dev/null 2>&1; then
          if [ -d "/usr/lib/llvm-18" ]; then
            echo "clang 18 and llvm 18 already installed"
          else
            wget https://apt.llvm.org/llvm.sh 
            chmod +x ./llvm.sh
            sudo ./llvm.sh 18 all
          fi

          if [ -f /usr/lib/llvm-18/bin/clang-cl ]; then
            if [ ! -L /usr/bin/clang-cl ]; then
                sudo ln -s /usr/lib/llvm-18/bin/clang-cl /usr/bin/clang-cl
            else
                echo "clang-cl already linked"
            fi 
          else
            echo "Error: /usr/lib/llvm-18/bin/clang-cl does not exist."
            exit 1
          fi

          if [ -f /usr/lib/llvm-18/bin/clang ]; then
            if [ ! -L /usr/bin/clang ]; then
                sudo ln -s /usr/lib/llvm-18/bin/clang /usr/bin/clang
            else
                echo "clang already linked"
            fi 
          else
            echo "Error: /usr/lib/llvm-18/bin/clang does not exist."
            exit 1
          fi

          if [ -f /usr/lib/llvm-18/bin/llvm-lib ]; then
            if [ ! -L /usr/bin/llvm-lib ]; then
                sudo ln -s /usr/lib/llvm-18/bin/llvm-lib /usr/bin/llvm-lib
            else
                echo "llvm-lib already linked"
            fi 
          else
            echo "Error: /usr/lib/llvm-18/bin/llvm-lib does not exist."
            exit 1
          fi

          if [ -f /usr/lib/llvm-18/bin/lld-link ]; then
            if [ ! -L /usr/bin/lld-link ]; then
                sudo ln -s /usr/lib/llvm-18/bin/lld-link /usr/bin/lld-link
            else
                echo "lld-link already linked"
            fi 
          else
            echo "Error: /usr/lib/llvm-18/bin/lld-link does not exist."
            exit 1
          fi

          if [ -f /usr/lib/llvm-18/bin/llvm-ml ]; then
            if [ ! -L /usr/bin/llvm-ml ]; then
                sudo ln -s /usr/lib/llvm-18/bin/llvm-ml /usr/bin/llvm-ml
            else
                echo "llvm-ml already linked"
            fi 
          else
            echo "Error: /usr/lib/llvm-18/bin/llvm-ml does not exist."
            exit 1
          fi

          if [ -f /usr/lib/llvm-18/bin/ld.lld ]; then
            if [ ! -L /usr/bin/ld.lld ]; then
                sudo ln -s /usr/lib/llvm-18/bin/ld.lld /usr/bin/ld.lld
            else
                echo "ld.lld already linked"
            fi 
          else
            echo "Error: /usr/lib/llvm-18/bin/ld.lld does not exist."
            exit 1
          fi

          clang-cl --version
          lld-link --version
          ld.lld --version
        fi
      shell: bash

      # This is needed to build the rust guests
    - name: Install x86_64-pc-windows-msvc target
      if: ${{ (runner.os == 'Linux') }}
      run: |
        rustup target add x86_64-pc-windows-msvc
      shell: bash

    - name: Install x86_64-unknown-none target
      if: ${{ (runner.os == 'Linux') }}
      run: |
        rustup target add x86_64-unknown-none
      shell: bash

    - name: Set up env vars (Linux)
      if: ${{ (runner.os == 'Linux') }}
      run: |
        if [ -e /dev/kvm ]; then
          sudo adduser $(whoami) kvm
        fi
        echo "RUST_BACKTRACE=full" >> $GITHUB_ENV
      shell: bash

    ### Windows setup ###

    - name: Enable WHP on Windows
      if: ${{ (runner.os == 'Windows') }}
      run:  Enable-WindowsOptionalFeature -Online -FeatureName HyperVisorPlatform
      shell: pwsh

    - name: Install x86_64-pc-windows-msvc target (Windows)
      if: ${{ (runner.os == 'Windows') }}
      run: |
        rustup target add x86_64-pc-windows-msvc
      shell: pwsh

    - name: Install x86_64-unknown-none target (Windows)
      if: ${{ (runner.os == 'Windows') }}
      run: |
        rustup target add x86_64-unknown-none
      shell: pwsh

    - name: Set up env vars (Windows)
      if: ${{ (runner.os == 'Windows') }}
      run: |
        echo "RUST_BACKTRACE=full" >> $GITHUB_ENV
      shell: pwsh
